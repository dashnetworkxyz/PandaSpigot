From d935375d23baa456c0a46015ac584c9891916c97 Mon Sep 17 00:00:00 2001
From: MasterDash5 <constant4337@molecularmail.com>
Date: Thu, 4 Sep 2025 21:23:58 -0600
Subject: [PATCH] Adventure API

---
 src/main/java/org/bukkit/Bukkit.java          | 33 +++++++
 src/main/java/org/bukkit/Server.java          | 83 ++++++++++++++++-
 src/main/java/org/bukkit/World.java           |  9 +-
 src/main/java/org/bukkit/block/Sign.java      | 32 +++++++
 .../org/bukkit/command/CommandSender.java     | 43 ++++++++-
 .../bukkit/command/ProxiedCommandSender.java  | 14 ++-
 src/main/java/org/bukkit/entity/Player.java   | 89 ++++++++++++++++++-
 .../bukkit/event/block/SignChangeEvent.java   | 57 +++++++++++-
 .../bukkit/event/entity/PlayerDeathEvent.java | 42 ++++++++-
 .../player/AsyncPlayerPreLoginEvent.java      | 59 ++++++++++--
 .../bukkit/event/player/PlayerJoinEvent.java  | 31 ++++++-
 .../bukkit/event/player/PlayerKickEvent.java  | 61 +++++++++++--
 .../bukkit/event/player/PlayerLoginEvent.java | 58 +++++++++++-
 .../event/player/PlayerPreLoginEvent.java     | 42 +++++++--
 .../bukkit/event/player/PlayerQuitEvent.java  | 31 ++++++-
 .../event/server/ServerListPingEvent.java     | 54 ++++++++++-
 .../org/bukkit/inventory/meta/BookMeta.java   |  2 +-
 .../org/bukkit/inventory/meta/ItemMeta.java   | 37 ++++++++
 .../java/org/bukkit/scoreboard/Objective.java | 10 +++
 src/main/java/org/bukkit/scoreboard/Team.java | 26 ++++++
 20 files changed, 774 insertions(+), 39 deletions(-)

diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 8fbc8283..70a79757 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -958,6 +958,39 @@ public final class Bukkit {
         return server.createInventory(owner, size, title);
     }
 
+    // PandaSpigot start - Adventure
+    /**
+     * Creates an empty inventory with the specified type and title. If the type
+     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+     * otherwise the new inventory has the normal size for its type.<br>
+     * It should be noted that some inventory types do not support titles and
+     * may not render with said titles on the Minecraft client.
+     *
+     * @param owner The holder of the inventory; can be null if there's no holder.
+     * @param type The type of inventory to create.
+     * @param title The title of the inventory, to be displayed when it is viewed.
+     * @return The new inventory.
+     */
+    public static Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
+        return server.createInventory(owner, type, title);
+    }
+
+    /**
+     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+     * specified size and title.
+     *
+     * @param owner the holder of the inventory, or null to indicate no holder
+     * @param size a multiple of 9 as the size of inventory to create
+     * @param title the title of the inventory, displayed when inventory is
+     *     viewed
+     * @return a new inventory
+     * @throws IllegalArgumentException if the size is not a multiple of 9
+     */
+    public static Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) throws IllegalArgumentException {
+        return server.createInventory(owner, size, title);
+    }
+    // PandaSpigot end
+
     /**
      * Gets user-specified limit for number of monsters that can spawn in a
      * chunk.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 1b62463a..8358ef2a 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -47,7 +47,7 @@ import org.bukkit.inventory.meta.ItemMeta;
 /**
  * Represents a server implementation.
  */
-public interface Server extends PluginMessageRecipient {
+public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // PandaSpigot - Adventure
 
     /**
      * Used for all administrative messages, such as an operator using a
@@ -254,6 +254,42 @@ public interface Server extends PluginMessageRecipient {
     public void broadcast(net.md_5.bungee.api.chat.BaseComponent... components);
     // Paper end
 
+    // PandaSpigot start - Adventure
+    /**
+     * Sends a message with the MiniMessage format to the server.
+     * <p>
+     * See <a href="https://docs.advntr.dev/minimessage/">MiniMessage docs</a>
+     * for more information on the format.
+     *
+     * @param message MiniMessage content
+     */
+    default void sendRichMessage(String message) {
+        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message, this));
+    }
+
+    /**
+     * Sends a message with the MiniMessage format to the server.
+     * <p>
+     * See <a href="https://docs.advntr.dev/minimessage/">MiniMessage docs</a> and <a href="https://docs.advntr.dev/minimessage/dynamic-replacements">MiniMessage Placeholders docs</a>
+     * for more information on the format.
+     *
+     * @param message MiniMessage content
+     * @param resolvers resolvers to use
+     */
+    default void sendRichMessage(String message, net.kyori.adventure.text.minimessage.tag.resolver.TagResolver... resolvers) {
+        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message, this, resolvers));
+    }
+
+    /**
+     * Sends a plain message to the server.
+     *
+     * @param message plain message
+     */
+    default void sendPlainMessage(String message) {
+        this.sendMessage(net.kyori.adventure.text.Component.text(message));
+    }
+    // PandaSpigot end
+
     /**
      * Gets the name of the update folder. The update folder is used to safely
      * update plugins at the right moment on a plugin load.
@@ -782,6 +818,35 @@ public interface Server extends PluginMessageRecipient {
      */
     Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException;
 
+    // PandaSpigot start - Adventure
+    /**
+     * Creates an empty inventory with the specified type and title. If the type
+     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+     * otherwise the new inventory has the normal size for its type.<br>
+     * It should be noted that some inventory types do not support titles and
+     * may not render with said titles on the Minecraft client.
+     *
+     * @param owner The holder of the inventory; can be null if there's no holder.
+     * @param type The type of inventory to create.
+     * @param title The title of the inventory, to be displayed when it is viewed.
+     * @return The new inventory.
+     */
+    Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title);
+
+    /**
+     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+     * specified size and title.
+     *
+     * @param owner the holder of the inventory, or null to indicate no holder
+     * @param size a multiple of 9 as the size of inventory to create
+     * @param title the title of the inventory, displayed when inventory is
+     *     viewed
+     * @return a new inventory
+     * @throws IllegalArgumentException if the size is not a multiple of 9
+     */
+    Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title);
+    // PandaSpigot end
+
     /**
      * Gets user-specified limit for number of monsters that can spawn in a
      * chunk.
@@ -842,6 +907,22 @@ public interface Server extends PluginMessageRecipient {
      */
     String getShutdownMessage();
 
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the message that is displayed on the server list.
+     *
+     * @return the servers MOTD
+     */
+    net.kyori.adventure.text.Component motd();
+
+    /**
+     * Gets the default message that is displayed when the server is stopped.
+     *
+     * @return the shutdown message
+     */
+    net.kyori.adventure.text.Component shutdownMessage();
+    // PandaSpigot end
+
     /**
      * Gets the current warning state for the server.
      *
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 325d65a3..446c905b 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -20,7 +20,7 @@ import org.bukkit.util.Vector;
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
-public interface World extends PluginMessageRecipient, Metadatable {
+public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // PandaSpigot - Adventure
 
     /**
      * Gets the {@link Block} at the given coordinates
@@ -450,6 +450,13 @@ public interface World extends PluginMessageRecipient, Metadatable {
      */
     public List<Player> getPlayers();
 
+    // PandaSpigot start - Adventure
+    @Override
+    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
+        return this.getPlayers();
+    }
+    // PandaSpigot end
+
     /**
      * Returns a list of entities within a bounding box centered around a Location.
      *
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index 5d7a633d..e3d5829a 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -34,4 +34,36 @@ public interface Sign extends BlockState {
      * @throws IndexOutOfBoundsException If the index is out of the range 0..3
      */
     public void setLine(int index, String line) throws IndexOutOfBoundsException;
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets all the lines of text currently on this sign.
+     *
+     * @return List of Components containing each line of text
+     */
+    public java.util.List<net.kyori.adventure.text.Component> lines();
+
+    /**
+     * Gets the line of text at the specified index.
+     * <p>
+     * For example, line(0) will return the first line of text.
+     *
+     * @param index Line number to get the text from, starting at 0
+     * @throws IndexOutOfBoundsException Thrown when the line does not exist
+     * @return Text on the given line
+     */
+    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;
+
+    /**
+     * Sets the line of text at the specified index.
+     * <p>
+     * For example, line(0, Component.text("Line One")) will set the first line of text to
+     * "Line One".
+     *
+     * @param index Line number to set the text at, starting from 0
+     * @param line New text to set at the specified index
+     * @throws IndexOutOfBoundsException If the index is out of the range 0..3
+     */
+    public void line(int index, net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;
+    // PandaSpigot end
 }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 148756b9..3978eb9f 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -3,7 +3,7 @@ package org.bukkit.command;
 import org.bukkit.Server;
 import org.bukkit.permissions.Permissible;
 
-public interface CommandSender extends Permissible {
+public interface CommandSender extends Permissible, net.kyori.adventure.audience.Audience { // PandaSpigot - Adventure
 
     /**
      * Sends this sender a message
@@ -19,6 +19,47 @@ public interface CommandSender extends Permissible {
      */
     public void sendMessage(String[] messages);
 
+    // PandaSpigot start - Adventure
+    @Override
+    default void sendMessage(net.kyori.adventure.identity.Identity source, net.kyori.adventure.text.Component message, net.kyori.adventure.audience.MessageType type) {
+        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));
+    }
+
+    /**
+     * Sends a message with the MiniMessage format to the command sender.
+     * <p>
+     * See <a href="https://docs.advntr.dev/minimessage/">MiniMessage docs</a>
+     * for more information on the format.
+     *
+     * @param message MiniMessage content
+     */
+    default void sendRichMessage(String message) {
+        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message, this));
+    }
+
+    /**
+     * Sends a message with the MiniMessage format to the command sender.
+     * <p>
+     * See <a href="https://docs.advntr.dev/minimessage/">MiniMessage docs</a> and <a href="https://docs.advntr.dev/minimessage/dynamic-replacements">MiniMessage Placeholders docs</a>
+     * for more information on the format.
+     *
+     * @param message MiniMessage content
+     * @param resolvers resolvers to use
+     */
+    default void sendRichMessage(String message, net.kyori.adventure.text.minimessage.tag.resolver.TagResolver... resolvers) {
+        this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message, this, resolvers));
+    }
+
+    /**
+     *  Sends a plain message to the command sender.
+     *
+     * @param message plain message
+     */
+    default void sendPlainMessage(String message) {
+        this.sendMessage(net.kyori.adventure.text.Component.text(message));
+    }
+    // PandaSpigot end
+
     /**
      * Returns the server instance that this command is running on
      *
diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java
index 24c4ebad..ba31adaf 100644
--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java
+++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java
@@ -1,7 +1,7 @@
 
 package org.bukkit.command;
 
-public interface ProxiedCommandSender extends CommandSender {
+public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // PandaSpigot - Adventure
 
     /**
      * Returns the CommandSender which triggered this proxied command
@@ -17,4 +17,16 @@ public interface ProxiedCommandSender extends CommandSender {
      */
     CommandSender getCallee();
 
+    // PandaSpigot start - Adventure
+    @Override
+    default void sendMessage(net.kyori.adventure.identity.Identity source, net.kyori.adventure.text.Component message, net.kyori.adventure.audience.MessageType type) {
+        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);
+    }
+
+    @Override
+    default net.kyori.adventure.audience.Audience audience() {
+        return this.getCaller();
+    }
+    // PandaSpigot end
+
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index d02fe560..3c4c5a20 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -26,7 +26,7 @@ import org.github.paperspigot.Title;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient {
+public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // PandaSpigot - Adventure
 
     /**
      * Gets the "friendly" name to display of this player. This may include
@@ -80,6 +80,60 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      */
     public void setPlayerListName(String name);
 
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the "friendly" name to display of this player. This may include
+     * color.
+     * <p>
+     * Note that this name will not be displayed in game, only in chat and
+     * places defined by plugins.
+     *
+     * @return the friendly name
+     */
+    public net.kyori.adventure.text.Component displayName();
+
+    /**
+     * Sets the "friendly" name to display of this player. This may include
+     * color.
+     * <p>
+     * Note that this name will not be displayed in game, only in chat and
+     * places defined by plugins.
+     *
+     * @param displayName The new display name.
+     */
+    public void displayName(net.kyori.adventure.text.Component displayName);
+
+    /**
+     * Gets the name that is shown on the player list.
+     *
+     * @return the player list name
+     */
+    public net.kyori.adventure.text.Component playerListName();
+
+    /**
+     * Sets the name that is shown on the in-game player list.
+     * <p>
+     * The name cannot be longer than 16 characters, but {@link ChatColor} is
+     * supported.
+     * <p>
+     * If the value is null, the name will be identical to {@link #getName()}.
+     * <p>
+     * This name is case-sensitive and unique, two names with different casing
+     * will appear as two different people. If a player joins afterward with
+     * a name that conflicts with a player's custom list name, the joining
+     * player's player list name will have a random number appended to it (1-2
+     * characters long in the default implementation). If the joining player's
+     * name is 15 or 16 characters long, part of the name will be truncated at
+     * the end to allow the addition of the two digits.
+     *
+     * @param playerListName new player list name
+     * @throws IllegalArgumentException if the name is already used by someone
+     *     else
+     * @throws IllegalArgumentException if the length of the name is too long
+     */
+    public void playerListName(net.kyori.adventure.text.Component playerListName);
+    // PandaSpigot end
+
     /**
      * Set the target of the player's compass.
      *
@@ -115,6 +169,15 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      */
     public void kickPlayer(String message);
 
+    // PandaSpigot start - Adventure
+    /**
+     * Kicks player with custom kick message.
+     *
+     * @param message kick message
+     */
+    public void kick(net.kyori.adventure.text.Component message);
+    // PandaSpigot end
+
     /**
      * Says a message (or runs a command).
      *
@@ -364,6 +427,23 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      */
     public void setPlayerListHeaderFooter(net.md_5.bungee.api.chat.BaseComponent header, net.md_5.bungee.api.chat.BaseComponent footer);
 
+    // PandaSpigot start - Adventure
+
+    /**
+     * Gets the currently displayed player list header for this player.
+     *
+     * @return player list header or null
+     */
+    public net.kyori.adventure.text.Component playerListHeader();
+
+    /**
+     * Gets the current displayed player list footer for this player.
+     *
+     * @return player list footer or null
+     */
+    public net.kyori.adventure.text.Component playerListFooter();
+    // PandaSpigot end
+
     /**
      * Update the times for titles displayed to the player
      *
@@ -1336,4 +1416,11 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
 
     Spigot spigot();
     // Spigot end
+
+    // PandaSpigot start - Adventure
+    @Override
+    default net.kyori.adventure.identity.Identity identity() {
+        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());
+    }
+    // PandaSpigot end
 }
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 83188cf5..ed2f9bfb 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -14,13 +14,26 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     private final Player player;
-    private final String[] lines;
+    private final java.util.List<net.kyori.adventure.text.Component> lines; // PandaSpigot - Adventure
 
     public SignChangeEvent(final Block theBlock, final Player thePlayer, final String[] theLines) {
+        super(theBlock);
+        this.player = thePlayer;
+        // PandaSpigot start - Adventure
+        this.lines = new java.util.ArrayList<>();
+        for (String line : theLines) {
+            this.lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line));
+        }
+        // PandaSpigot end
+    }
+
+    // PandaSpigot start - Adventure
+    public SignChangeEvent(final Block theBlock, final Player thePlayer, final java.util.List<net.kyori.adventure.text.Component> theLines) {
         super(theBlock);
         this.player = thePlayer;
         this.lines = theLines;
     }
+    // PandaSpigot end
 
     /**
      * Gets the player changing the sign involved in this event.
@@ -37,7 +50,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @return the String array for the sign's lines new text
      */
     public String[] getLines() {
-        return lines;
+        return lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // PandaSpigot - Adventure
     }
 
     /**
@@ -50,7 +63,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      *     or < 0}
      */
     public String getLine(int index) throws IndexOutOfBoundsException {
-        return lines[index];
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(lines.get(index)); // PandaSpigot - Adventure
     }
 
     /**
@@ -62,8 +75,44 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      *     or < 0}
      */
     public void setLine(int index, String line) throws IndexOutOfBoundsException {
-        lines[index] = line;
+        lines.set(index, line == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line)); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets all the lines of text from the sign involved in this event.
+     *
+     * @return the Component list for the sign's lines new text
+     */
+    public java.util.List<net.kyori.adventure.text.Component> lines() {
+        return lines;
+    }
+
+    /**
+     * Gets a single line of text from the sign involved in this event.
+     *
+     * @param index index of the line to get
+     * @return the Component containing the line of text associated with the
+     *     provided index
+     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
+     *     or < 0}
+     */
+    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {
+        return lines.get(index);
+    }
+
+    /**
+     * Sets a single line for the sign involved in this event
+     *
+     * @param index index of the line to set
+     * @param line text to set
+     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
+     *     or < 0}
+     */
+    public void line(int index, net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {
+        lines.set(index, line);
     }
+    // PandaSpigot end
 
     public boolean isCancelled() {
         return cancel;
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index aad03549..06dd9fa0 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -10,7 +10,7 @@ import org.bukkit.inventory.ItemStack;
  */
 public class PlayerDeathEvent extends EntityDeathEvent {
     private int newExp = 0;
-    private String deathMessage = "";
+    private net.kyori.adventure.text.Component deathMessage; // PandaSpigot - Adventure
     private int newLevel = 0;
     private int newTotalExp = 0;
     private boolean keepLevel = false;
@@ -25,12 +25,30 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     }
 
     public PlayerDeathEvent(final Player player, final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, final String deathMessage) {
+        super(player, drops, droppedExp);
+        this.newExp = newExp;
+        this.newTotalExp = newTotalExp;
+        this.newLevel = newLevel;
+        this.deathMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    public PlayerDeathEvent(final Player player, final List<ItemStack> drops, final int droppedExp, final net.kyori.adventure.text.Component deathMessage) {
+        this(player, drops, droppedExp, 0, deathMessage);
+    }
+
+    public PlayerDeathEvent(final Player player, final List<ItemStack> drops, final int droppedExp, final int newExp, final net.kyori.adventure.text.Component deathMessage) {
+        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);
+    }
+
+    public PlayerDeathEvent(final Player player, final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, final net.kyori.adventure.text.Component deathMessage) {
         super(player, drops, droppedExp);
         this.newExp = newExp;
         this.newTotalExp = newTotalExp;
         this.newLevel = newLevel;
         this.deathMessage = deathMessage;
     }
+    // PandaSpigot end
 
     @Override
     public Player getEntity() {
@@ -43,7 +61,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @param deathMessage Message to appear to other players on the server.
      */
     public void setDeathMessage(String deathMessage) {
-        this.deathMessage = deathMessage;
+        this.deathMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage); // PandaSpigot - Adventure
     }
 
     /**
@@ -52,8 +70,28 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @return Message to appear to other players on the server.
      */
     public String getDeathMessage() {
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(deathMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Set the death message that will appear to everyone on the server.
+     *
+     * @param deathMessage Message to appear to other players on the server.
+     */
+    public void deathMessage(net.kyori.adventure.text.Component deathMessage) {
+        this.deathMessage = deathMessage;
+    }
+
+    /**
+     * Get the death message that will appear to everyone on the server.
+     *
+     * @return Message to appear to other players on the server.
+     */
+    public net.kyori.adventure.text.Component deathMessage() {
         return deathMessage;
     }
+    // PandaSpigot end
 
     /**
      * Gets how much EXP the Player should have at respawn.
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 1d571889..2dcda19d 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -14,7 +14,7 @@ import org.bukkit.event.HandlerList;
 public class AsyncPlayerPreLoginEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private Result result;
-    private String message;
+    private net.kyori.adventure.text.Component message; // PandaSpigot - Adventure
     private final String name;
     private final InetAddress ipAddress;
     private final UUID uniqueId;
@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
     public AsyncPlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
         super(true);
         this.result = Result.ALLOWED;
-        this.message = "";
+        this.message = net.kyori.adventure.text.Component.empty(); // PandaSpigot - Adventure
         this.name = name;
         this.ipAddress = ipAddress;
         this.uniqueId = uniqueId;
@@ -84,7 +84,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @return Current kick message
      */
     public String getKickMessage() {
-        return message;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -93,7 +93,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      * @param message New kick message
      */
     public void setKickMessage(final String message) {
-        this.message = message;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -101,7 +101,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     public void allow() {
         result = Result.ALLOWED;
-        message = "";
+        message = net.kyori.adventure.text.Component.empty(); // PandaSpigot - Adventure
     }
 
     /**
@@ -112,7 +112,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     public void disallow(final Result result, final String message) {
         this.result = result;
-        this.message = message;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -126,9 +126,56 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     @Deprecated
     public void disallow(final PlayerPreLoginEvent.Result result, final String message) {
+        this.result = result == null ? null : Result.valueOf(result.name());
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the current kick message that will be used if getResult() !=
+     * Result.ALLOWED
+     *
+     * @return Current kick message
+     */
+    public net.kyori.adventure.text.Component kickMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the kick message to display if getResult() != Result.ALLOWED
+     *
+     * @param message New kick message
+     */
+    public void kickMessage(net.kyori.adventure.text.Component message) {
+        this.message = message;
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final net.kyori.adventure.text.Component message) {
+        this.result = result;
+        this.message = message;
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     * @deprecated This method uses a deprecated enum from {@link
+     *     PlayerPreLoginEvent}
+     * @see #disallow(Result, net.kyori.adventure.text.Component)
+     */
+    @Deprecated
+    public void disallow(final PlayerPreLoginEvent.Result result, final net.kyori.adventure.text.Component message) {
         this.result = result == null ? null : Result.valueOf(result.name());
         this.message = message;
     }
+    // PandaSpigot end
 
     /**
      * Gets the player's name.
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index e7481f92..0f134dc7 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -8,12 +8,19 @@ import org.bukkit.event.HandlerList;
  */
 public class PlayerJoinEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private String joinMessage;
+    private net.kyori.adventure.text.Component joinMessage; // PandaSpigot - Adventure
 
     public PlayerJoinEvent(final Player playerJoined, final String joinMessage) {
+        super(playerJoined);
+        this.joinMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    public PlayerJoinEvent(final Player playerJoined, final net.kyori.adventure.text.Component joinMessage) {
         super(playerJoined);
         this.joinMessage = joinMessage;
     }
+    // PandaSpigot end
 
     /**
      * Gets the join message to send to all online players
@@ -21,7 +28,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @return string join message
      */
     public String getJoinMessage() {
-        return joinMessage;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(joinMessage); // PandaSpigot - Adventure
     }
 
     /**
@@ -30,8 +37,28 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @param joinMessage join message
      */
     public void setJoinMessage(String joinMessage) {
+        this.joinMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the join message to send to all online players
+     *
+     * @return Component join message
+     */
+    public net.kyori.adventure.text.Component joinMessage() {
+        return joinMessage;
+    }
+
+    /**
+     * Sets the join message to send to all online players
+     *
+     * @param joinMessage join message
+     */
+    public void joinMessage(net.kyori.adventure.text.Component joinMessage) {
         this.joinMessage = joinMessage;
     }
+    // PandaSpigot end
 
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 39e81b67..c0ed7dba 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -9,16 +9,29 @@ import org.bukkit.event.HandlerList;
  */
 public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private String leaveMessage;
-    private String kickReason;
+    // PandaSpigot start - Adventure
+    private net.kyori.adventure.text.Component leaveMessage;
+    private net.kyori.adventure.text.Component kickReason;
+    // PandaSpigot end
     private Boolean cancel;
 
     public PlayerKickEvent(final Player playerKicked, final String kickReason, final String leaveMessage) {
+        super(playerKicked);
+        // PandaSpigot start - Adventure
+        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason);
+        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage);
+        // PandaSpigot end
+        this.cancel = false;
+    }
+
+    // PandaSpigot start - Adventure
+    public PlayerKickEvent(final Player playerKicked, final net.kyori.adventure.text.Component kickReason, final net.kyori.adventure.text.Component leaveMessage) {
         super(playerKicked);
         this.kickReason = kickReason;
         this.leaveMessage = leaveMessage;
         this.cancel = false;
     }
+    // PandaSpigot end
 
     /**
      * Gets the reason why the player is getting kicked
@@ -26,7 +39,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @return string kick reason
      */
     public String getReason() {
-        return kickReason;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(kickReason); // PandaSpigot - Adventure
     }
 
     /**
@@ -35,7 +48,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @return string kick reason
      */
     public String getLeaveMessage() {
-        return leaveMessage;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(leaveMessage); // PandaSpigot - Adventure
     }
 
     public boolean isCancelled() {
@@ -52,7 +65,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @param kickReason kick reason
      */
     public void setReason(String kickReason) {
-        this.kickReason = kickReason;
+        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // PandaSpigot - Adventure
     }
 
     /**
@@ -61,8 +74,46 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @param leaveMessage leave message
      */
     public void setLeaveMessage(String leaveMessage) {
+        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the reason why the player is getting kicked
+     *
+     * @return Component kick reason
+     */
+    public net.kyori.adventure.text.Component reason() {
+        return kickReason;
+    }
+
+    /**
+     * Gets the leave message send to all online players
+     *
+     * @return Component kick reason
+     */
+    public net.kyori.adventure.text.Component leaveMessage() {
+        return leaveMessage;
+    }
+
+    /**
+     * Sets the reason why the player is getting kicked
+     *
+     * @param kickReason kick reason
+     */
+    public void reason(net.kyori.adventure.text.Component kickReason) {
+        this.kickReason = kickReason;
+    }
+
+    /**
+     * Sets the leave message send to all online players
+     *
+     * @param leaveMessage leave message
+     */
+    public void leaveMessage(net.kyori.adventure.text.Component leaveMessage) {
         this.leaveMessage = leaveMessage;
     }
+    // PandaSpigot end
 
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 4bc024ff..84d3af60 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -13,7 +13,7 @@ public class PlayerLoginEvent extends PlayerEvent {
     private final InetAddress address;
     private final String hostname;
     private Result result = Result.ALLOWED;
-    private String message = "";
+    private net.kyori.adventure.text.Component message = net.kyori.adventure.text.Component.empty(); // PandaSpigot - Adventure
     private final InetAddress realAddress; // Spigot
 
     /**
@@ -82,8 +82,26 @@ public class PlayerLoginEvent extends PlayerEvent {
     public PlayerLoginEvent(final Player player, String hostname, final InetAddress address, final Result result, final String message, final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
         this.result = result;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * This constructor pre-configures the event with a result and message
+     *
+     * @param player The {@link Player} for this event
+     * @param hostname The hostname that was used to connect to the server
+     * @param address The address the player used to connect, provided for
+     *     timing issues
+     * @param result The result status for this event
+     * @param message The message to be displayed if result denies login
+     */
+    public PlayerLoginEvent(final Player player, String hostname, final InetAddress address, final Result result, final net.kyori.adventure.text.Component message, final InetAddress realAddress) {
+        this(player, hostname, address, realAddress);
+        this.result = result;
         this.message = message;
     }
+    // PandaSpigot end
 
     // Spigot start
     /**
@@ -121,7 +139,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @return Current kick message
      */
     public String getKickMessage() {
-        return message;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -130,7 +148,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message New kick message
      */
     public void setKickMessage(final String message) {
-        this.message = message;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -148,7 +166,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      */
     public void allow() {
         result = Result.ALLOWED;
-        message = "";
+        message = net.kyori.adventure.text.Component.text(""); // PandaSpigot - Adventure
     }
 
     /**
@@ -158,9 +176,41 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message Kick message to display to the user
      */
     public void disallow(final Result result, final String message) {
+        this.result = result;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the current kick message that will be used if getResult() !=
+     * Result.ALLOWED
+     *
+     * @return Current kick message
+     */
+    public net.kyori.adventure.text.Component kickMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the kick message to display if getResult() != Result.ALLOWED
+     *
+     * @param message New kick message
+     */
+    public void kickMessage(final net.kyori.adventure.text.Component message) {
+        this.message = message;
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final net.kyori.adventure.text.Component message) {
         this.result = result;
         this.message = message;
     }
+    // PandaSpigot end
 
     /**
      * Gets the {@link InetAddress} for the Player associated with this event.
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index e8553f0f..2f8b9920 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -19,7 +19,7 @@ import org.bukkit.event.HandlerList;
 public class PlayerPreLoginEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private Result result;
-    private String message;
+    private net.kyori.adventure.text.Component message; // PandaSpigot - Adventure
     private final String name;
     private final InetAddress ipAddress;
     private final UUID uniqueId;
@@ -31,7 +31,7 @@ public class PlayerPreLoginEvent extends Event {
 
     public PlayerPreLoginEvent(final String name, final InetAddress ipAddress, final UUID uniqueId) {
         this.result = Result.ALLOWED;
-        this.message = "";
+        this.message = net.kyori.adventure.text.Component.empty(); // PandaSpigot - Adventure
         this.name = name;
         this.ipAddress = ipAddress;
         this.uniqueId = uniqueId;
@@ -62,7 +62,7 @@ public class PlayerPreLoginEvent extends Event {
      * @return Current kick message
      */
     public String getKickMessage() {
-        return message;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -71,7 +71,7 @@ public class PlayerPreLoginEvent extends Event {
      * @param message New kick message
      */
     public void setKickMessage(final String message) {
-        this.message = message;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
     }
 
     /**
@@ -79,7 +79,7 @@ public class PlayerPreLoginEvent extends Event {
      */
     public void allow() {
         result = Result.ALLOWED;
-        message = "";
+        message = net.kyori.adventure.text.Component.empty(); // PandaSpigot - Adventure
     }
 
     /**
@@ -89,9 +89,41 @@ public class PlayerPreLoginEvent extends Event {
      * @param message Kick message to display to the user
      */
     public void disallow(final Result result, final String message) {
+        this.result = result;
+        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the current kick message that will be used if getResult() !=
+     * Result.ALLOWED
+     *
+     * @return Current kick message
+     */
+    public net.kyori.adventure.text.Component kickMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the kick message to display if getResult() != Result.ALLOWED
+     *
+     * @param message New kick message
+     */
+    public void kickMessage(final net.kyori.adventure.text.Component message) {
+        this.message = message;
+    }
+
+    /**
+     * Disallows the player from logging in, with the given reason
+     *
+     * @param result New result for disallowing the player
+     * @param message Kick message to display to the user
+     */
+    public void disallow(final Result result, final net.kyori.adventure.text.Component message) {
         this.result = result;
         this.message = message;
     }
+    // PandaSpigot end
 
     /**
      * Gets the player's name.
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index 5c8dc1b9..f0fd6e14 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -8,12 +8,19 @@ import org.bukkit.event.HandlerList;
  */
 public class PlayerQuitEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private String quitMessage;
+    private net.kyori.adventure.text.Component quitMessage; // PandaSpigot - Adventure
 
     public PlayerQuitEvent(final Player who, final String quitMessage) {
+        super(who);
+        this.quitMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(quitMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    public PlayerQuitEvent(final Player who, final net.kyori.adventure.text.Component quitMessage) {
         super(who);
         this.quitMessage = quitMessage;
     }
+    // PandaSpigot end
 
     /**
      * Gets the quit message to send to all online players
@@ -21,7 +28,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @return string quit message
      */
     public String getQuitMessage() {
-        return quitMessage;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(quitMessage); // PandaSpigot - Adventure
     }
 
     /**
@@ -30,8 +37,28 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @param quitMessage quit message
      */
     public void setQuitMessage(String quitMessage) {
+        this.quitMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(quitMessage); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the quit message to send to all online players
+     *
+     * @return string quit message
+     */
+    public net.kyori.adventure.text.Component quitMessage() {
+        return quitMessage;
+    }
+
+    /**
+     * Sets the quit message to send to all online players
+     *
+     * @param quitMessage quit message
+     */
+    public void quitMessage(net.kyori.adventure.text.Component quitMessage) {
         this.quitMessage = quitMessage;
     }
+    // PandaSpigot end
 
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index 3c38d857..d7bfd946 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -16,7 +16,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
     private static final int MAGIC_PLAYER_COUNT = Integer.MIN_VALUE;
     private static final HandlerList handlers = new HandlerList();
     private final InetAddress address;
-    private String motd;
+    private net.kyori.adventure.text.Component motd; // PandaSpigot - Adventure
     private final int numPlayers;
     private int maxPlayers;
 
@@ -24,7 +24,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
         super(); // Paper - Is this event being fired async?
         Validate.isTrue(numPlayers >= 0, "Cannot have negative number of players online", numPlayers);
         this.address = address;
-        this.motd = motd;
+        this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd); // PandaSpigot - Adventure
         this.numPlayers = numPlayers;
         this.maxPlayers = maxPlayers;
     }
@@ -42,9 +42,37 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
         super(); // Paper - Is this event being fired async?
         this.numPlayers = MAGIC_PLAYER_COUNT;
         this.address = address;
+        this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd); // PandaSpigot - Adventure
+        this.maxPlayers = maxPlayers;
+    }
+
+    // PandaSpigot start - Adventure
+    public ServerListPingEvent(final InetAddress address, final net.kyori.adventure.text.Component motd, final int numPlayers, final int maxPlayers) {
+        super();
+        Validate.isTrue(numPlayers >= 0, "Cannot have negative number of players online", numPlayers);
+        this.address = address;
+        this.motd = motd;
+        this.numPlayers = numPlayers;
+        this.maxPlayers = maxPlayers;
+    }
+
+    /**
+     * This constructor is intended for implementations that provide the
+     * {@link #iterator()} method, thus provided the {@link #getNumPlayers()}
+     * count.
+     *
+     * @param address the address of the pinger
+     * @param motd the message of the day
+     * @param maxPlayers the max number of players
+     */
+    protected ServerListPingEvent(final InetAddress address, final net.kyori.adventure.text.Component motd, final int maxPlayers) {
+        super();
+        this.numPlayers = MAGIC_PLAYER_COUNT;
+        this.address = address;
         this.motd = motd;
         this.maxPlayers = maxPlayers;
     }
+    // PandaSpigot end
 
     /**
      * Get the address the ping is coming from.
@@ -61,7 +89,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @return the message of the day
      */
     public String getMotd() {
-        return motd;
+        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(motd); // PandaSpigot - Adventure
     }
 
     /**
@@ -70,8 +98,28 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @param motd the message of the day
      */
     public void setMotd(String motd) {
+        this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd); // PandaSpigot - Adventure
+    }
+
+    // PandaSpigot start - Adventure
+    /**
+     * Get the message of the day message.
+     *
+     * @return the message of the day
+     */
+    public net.kyori.adventure.text.Component motd() {
+        return motd;
+    }
+
+    /**
+     * Change the message of the day message.
+     *
+     * @param motd the message of the day
+     */
+    public void motd(net.kyori.adventure.text.Component motd) {
         this.motd = motd;
     }
+    // PandaSpigot end
 
     /**
      * Get the number of players sent.
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 00175963..84ed2e32 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -8,7 +8,7 @@ import org.bukkit.Material;
  * Represents a book ({@link Material#BOOK_AND_QUILL} or {@link
  * Material#WRITTEN_BOOK}) that can have a title, an author, and pages.
  */
-public interface BookMeta extends ItemMeta {
+public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book { // PandaSpigot - Adventure
 
     /**
      * Checks for the existence of a title in the book.
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index d8cc8218..c4dbaa6d 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -185,4 +185,41 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable {
 
     Spigot spigot();
     // Spigot end
+
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the display name that is set.
+     * <p>
+     * Plugins should check that hasDisplayName() returns <code>true</code>
+     * before calling this method.
+     *
+     * @return the display name that is set
+     */
+    net.kyori.adventure.text.Component displayName();
+
+    /**
+     * Sets the display name.
+     *
+     * @param displayName the name to set
+     */
+    void displayName(net.kyori.adventure.text.Component displayName);
+
+    /**
+     * Gets the lore that is set.
+     * <p>
+     * Plugins should check if hasLore() returns <code>true</code> before
+     * calling this method.
+     *
+     * @return a list of lore that is set
+     */
+    List<net.kyori.adventure.text.Component> lore();
+
+    /**
+     * Sets the lore for this item.
+     * Removes lore when given null.
+     *
+     * @param lore the lore that will be set
+     */
+    void lore(List<net.kyori.adventure.text.Component> lore);
+    // PandaSpigot end
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
index 321aac79..c7e6a35b 100644
--- a/src/main/java/org/bukkit/scoreboard/Objective.java
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java
@@ -25,6 +25,16 @@ public interface Objective {
      */
     String getDisplayName() throws IllegalStateException;
 
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the name displayed to players for this objective
+     *
+     * @return this objective's display name
+     * @throws IllegalStateException if this objective has been unregistered
+     */
+    net.kyori.adventure.text.Component displayName() throws  IllegalStateException;
+    // PandaSpigot end
+
     /**
      * Sets the name displayed to players for this objective.
      *
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index 0fdcebd9..25a6a56b 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -76,6 +76,32 @@ public interface Team {
      */
     void setSuffix(String suffix) throws IllegalStateException, IllegalArgumentException;
 
+    // PandaSpigot start - Adventure
+    /**
+     * Gets the name displayed to entries for this team
+     *
+     * @return Team display name
+     * @throws IllegalStateException if this team has been unregistered
+     */
+    net.kyori.adventure.text.Component displayName() throws IllegalStateException;
+
+    /**
+     * Gets the prefix prepended to the display of entries on this team.
+     *
+     * @return Team prefix
+     * @throws IllegalStateException if this team has been unregistered
+     */
+    net.kyori.adventure.text.Component prefix() throws IllegalStateException;
+
+    /**
+     * Gets the suffix appended to the display of entries on this team.
+     *
+     * @return the team's current suffix
+     * @throws IllegalStateException if this team has been unregistered
+     */
+    net.kyori.adventure.text.Component suffix() throws IllegalStateException;
+    // PandaSpigot end
+
     /**
      * Gets the team friendly fire state
      *
-- 
2.50.0.windows.1

